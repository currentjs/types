name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      dry_run:
        description: 'Run without publishing (dry run)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Ensure we have access to the full git history for version calculation
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Error: dist directory not found after build"
          exit 1
        fi
        if [ ! -f "dist/index.js" ]; then
          echo "Error: dist/index.js not found after build"
          exit 1
        fi
        if [ ! -f "dist/index.d.ts" ]; then
          echo "Error: dist/index.d.ts not found after build"
          exit 1
        fi
        echo "Build verification successful"

    - name: Check if package is publishable
      run: npm pack --dry-run

    - name: Determine version bump type
      id: version-type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "type=${{ inputs.version_type }}" >> $GITHUB_OUTPUT
        else
          echo "type=patch" >> $GITHUB_OUTPUT
        fi

    - name: Update version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"

        # Bump version
        if [ "${{ steps.version-type.outputs.type }}" = "patch" ]; then
          npm version patch --no-git-tag-version
        elif [ "${{ steps.version-type.outputs.type }}" = "minor" ]; then
          npm version minor --no-git-tag-version
        elif [ "${{ steps.version-type.outputs.type }}" = "major" ]; then
          npm version major --no-git-tag-version
        fi

        # Get new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create git commit and tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "Bump version to ${{ steps.version.outputs.version }}"
        git tag "v${{ steps.version.outputs.version }}"

    - name: Push changes and tags
      run: |
        git push origin HEAD
        git push origin "v${{ steps.version.outputs.version }}"

    - name: Publish to NPM
      if: inputs.dry_run != true
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Dry run publish
      if: inputs.dry_run == true
      run: |
        echo "Dry run mode - would publish version ${{ steps.version.outputs.version }}"
        npm publish --dry-run